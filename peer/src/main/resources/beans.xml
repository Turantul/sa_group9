<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:/config.properties</value>
      </list>
    </property>
  </bean>

  <bean id="kernel" class="${root}.peer.service.Kernel" init-method="initialize" lazy-init="true">
    <property name="serverHandler" ref="serverHandler" />
    <property name="peerManager" ref="peerManager" />
    <property name="keepAliveOutgoing" ref="keepAliveOutgoing" />
    <property name="keepAliveIncoming" ref="keepAliveIncoming" />
    <property name="keepAliveCleanup" ref="keepAliveCleanup" />
    <property name="requestCleanup" ref="requestCleanup" />
    <property name="management" ref="management" />
    <property name="requestThread" ref="requestThread" />
    <property name="fingerprintService" ref="fingerprintService" />
    <property name="songMetadataService" ref="songMetadataService" />
    <property name="fpDao" ref="fpDao" />
    <property name="username">
      <util:constant static-field="${root}.peer.Launcher.USERNAME" />
    </property>
    <property name="password">
      <util:constant static-field="${root}.peer.Launcher.PASSWORD" />
    </property>
    <property name="listeningPort">
      <util:constant static-field="${root}.peer.Launcher.LISTENINGPORT" />
    </property>
    <property name="keepAlivePort">
      <util:constant static-field="${root}.peer.Launcher.KEEPALIVEPORT" />
    </property>
  </bean>

  <bean id="songMetadataService" class="${root}.common.media.SongMetadataService">
  </bean>

  <bean id="fingerprintService" class="${root}.common.media.FingerprintService">
    <property name="herz" value="${herz}" />
  </bean>

  <bean id="serverHandler" class="${root}.peer.service.ServerHandler">
    <property name="serverUrl" value="${serverUrl}" />
  </bean>

  <bean id="peerManager" class="${root}.peer.service.PeerManager">
  </bean>
  
  <bean id="requestManager" class="${root}.peer.service.RequestManager">
  </bean>

  <bean id="keepAliveOutgoing" class="${root}.peer.service.thread.KeepAliveOutgoingThread">
    <property name="listeningPort">
      <util:constant static-field="${root}.peer.Launcher.LISTENINGPORT" />
    </property>
    <property name="keepAlivePort">
      <util:constant static-field="${root}.peer.Launcher.KEEPALIVEPORT" />
    </property>
    <property name="keepAliveOutgoingInterval" value="${keepAlive.outgoing.interval}" />
    <property name="peerManager" ref="peerManager" />
  </bean>

  <bean id="keepAliveIncoming" class="${root}.peer.service.thread.KeepAliveIncomingThread">
    <property name="keepAlivePort">
      <util:constant static-field="${root}.peer.Launcher.KEEPALIVEPORT" />
    </property>
    <property name="peerManager" ref="peerManager" />
  </bean>

  <bean id="keepAliveCleanup" class="${root}.peer.service.thread.KeepAliveCleanupThread">
    <property name="keepAliveCleanupInterval" value="${keepAlive.cleanup.interval}" />
    <property name="requestNewPeerThreshold" value="${requestNewPeersThreshold}" />
    <property name="peerManager" ref="peerManager" />
  </bean>

  <bean id="requestCleanup" class="${root}.peer.service.thread.RequestCleanupThread">
    <property name="keepAliveCleanupInterval" value="${request.cleanup.interval}" />
    <property name="requestManager" ref="requestManager" />
  </bean>

  <bean id="management" class="${root}.peer.service.thread.ManagementThread">
    <property name="managementPort">
      <util:constant static-field="${root}.peer.Launcher.MANAGEMENTPORT" />
    </property>
    <property name="peerManager" ref="peerManager" />
  </bean>

  <bean id="requestThread" class="${root}.peer.service.thread.RequestThread">
    <property name="listeningPort">
      <util:constant static-field="${root}.peer.Launcher.LISTENINGPORT" />
    </property>
    <property name="peerManager" ref="peerManager" />
    <property name="requestManager" ref="requestManager" />
  </bean>

  <!-- This is a datasource for usage with h2 in server mode -->
  <bean id="org.h2.tools.Server" class="org.h2.tools.Server" factory-method="createTcpServer" init-method="start"
    destroy-method="stop" lazy-init="true">
    <constructor-arg value="-tcp,-tcpAllowOthers,true,-tcpPort,8043" />
  </bean>

  <!-- This datasource is for usage with the h2 database in EMBEDDED mode All H2 database files are loacted in src/main/resources/data. 
    On executing Maven (e.g. compile) these files are copied to target/classes/data/base. This strategy has the advantage to 
    test with a clean database, by doing mvn clean. -->
  <bean id="H2DataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driver}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.user}" />
    <property name="password" value="${jdbc.password}" />
    <property name="connectionProperties">
      <props>
        <prop key="shutdown">true</prop>
      </props>
    </property>
  </bean>

  <bean id="fpDao" class="${root}.peer.dao.FingerprintDAO" scope="singleton" init-method="init">
    <property name="dataSource" ref="H2DataSource" />
    <property name="sql_create">
      <value>
        CREATE TABLE IF NOT EXISTS fingerprint (id IDENTITY PRIMARY KEY, user VARCHAR, metadata OTHER, fingerprint
        OTHER);
      </value>
    </property>
    <property name="sql_insert">
      <value>
        INSERT INTO fingerprint (user, metadata, fingerprint) values(?,?,?);
      </value>
    </property>
    <property name="sql_delete">
      <value>
        DELETE FROM fingerprint WHERE id=? and user=?;
      </value>
    </property>
    <property name="sql_findFingerprintByUserAndMetadata">
      <value>
        SELECT * FROM fingerprint WHERE user=? and metadata=?;
      </value>
    </property>
    <property name="sql_getSongForUserAndFingerprint">
      <value>
        SELECT * FROM fingerprint WHERE user=? and fingerprint=?;
      </value>
    </property>
    <property name="sql_getAllFingerprintsForUser">
      <value>
        SELECT * FROM fingerprint WHERE user=?;
      </value>
    </property>
  </bean>

</beans>